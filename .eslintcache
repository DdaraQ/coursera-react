[{"D:\\workspace\\workspace-react-coursera\\confusion\\src\\reportWebVitals.js":"1","D:\\workspace\\workspace-react-coursera\\confusion\\src\\index.js":"2","D:\\workspace\\workspace-react-coursera\\confusion\\src\\App.js":"3","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\MenuComponent.js":"4","D:\\workspace\\workspace-react-coursera\\confusion\\src\\shared\\dishes.js":"5","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\DishdetailComponent.js":"6","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\MainComponent.js":"7","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\HeaderComponent.js":"8","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\FooterComponent.js":"9","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\HomeComponent.js":"10","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\ContactComponent.js":"11","D:\\workspace\\workspace-react-coursera\\confusion\\src\\shared\\comments.js":"12","D:\\workspace\\workspace-react-coursera\\confusion\\src\\shared\\leaders.js":"13","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\AboutComponent.js":"14","D:\\workspace\\workspace-react-coursera\\confusion\\src\\shared\\promotions.js":"15"},{"size":362,"mtime":1610033123071,"results":"16","hashOfConfig":"17"},{"size":641,"mtime":1610275632137,"results":"18","hashOfConfig":"17"},{"size":245,"mtime":1610373135133,"results":"19","hashOfConfig":"17"},{"size":1639,"mtime":1610558333791,"results":"20","hashOfConfig":"17"},{"size":1490,"mtime":1610549209292,"results":"21","hashOfConfig":"17"},{"size":2452,"mtime":1610558313480,"results":"22","hashOfConfig":"17"},{"size":2193,"mtime":1611539514268,"results":"23","hashOfConfig":"17"},{"size":5579,"mtime":1611227504485,"results":"24","hashOfConfig":"17"},{"size":2824,"mtime":1610544744505,"results":"25","hashOfConfig":"17"},{"size":1117,"mtime":1610551915204,"results":"26","hashOfConfig":"17"},{"size":10664,"mtime":1611209637330,"results":"27","hashOfConfig":"17"},{"size":4279,"mtime":1610549282558,"results":"28","hashOfConfig":"17"},{"size":2382,"mtime":1610549274616,"results":"29","hashOfConfig":"17"},{"size":4348,"mtime":1610950103650,"results":"30","hashOfConfig":"17"},{"size":445,"mtime":1610549266926,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"14y17g4",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"D:\\workspace\\workspace-react-coursera\\confusion\\src\\reportWebVitals.js",[],["69","70"],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\index.js",[],["71","72"],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\App.js",[],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\MenuComponent.js",["73","74","75","76","77"],"import React, { Component } from \"react\";\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DISHES } from \"../shared/dishes\";\r\nimport Dishdetail from \"./DishdetailComponent\";\r\n\r\n\r\nfunction RenderMenuItem({ dish, onClick }) {\r\n    return (\r\n        <Card>\r\n            <Link to={`/menu/${dish.id}`} >                        \r\n                <CardImg width=\"100%\" object src={dish.image} alt={dish.name} />                        \r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst Menu = (props) => {\r\n\r\n    const menu = props.dishes.map((dish) => {\r\n        return (\r\n            <div key={dish.id} className=\"col-12 col-xs-12 col-sm-12 col-md-5 m-1\">\r\n                <RenderMenuItem dish={dish} />\r\n            </div>\r\n        );\r\n    });\r\n    console.log('Menu Component render is invoked');\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>Menu</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                {menu}\r\n            </div>     \r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default Menu;","D:\\workspace\\workspace-react-coursera\\confusion\\src\\shared\\dishes.js",[],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\DishdetailComponent.js",["78"],"import { Component } from \"react\";\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction RenderDish({dish}) {\r\n    return (\r\n        <div className=\"col-12 col-md-5 m-1\">\r\n            <Card>\r\n                <CardImg width=\"100%\" object src={dish.image} alt={dish.name} />\r\n                <CardBody>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                    <CardText>{dish.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction RenderComments({comments}) {      \r\n    if (comments != null) {\r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                <ul className=\"list-unstyled\">\r\n                    {comments.map((comment) => {\r\n                        return (\r\n                            <li key={comment.id}>\r\n                                <p>{comment.comment}</p>\r\n                                <p>-- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        );        \r\n    } else {\r\n        return (\r\n            <div></div>  \r\n        );\r\n    }        \r\n}\r\n\r\nconst DishDetail = (props) => {\r\n    if (props.dish != null)\r\n        return (\r\n            <div className=\"container\"> \r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>           \r\n                <div className=\"row\">                                        \r\n                    <RenderDish dish={props.dish} />                 \r\n                    <RenderComments comments={props.comments} />                        \r\n                </div>  \r\n            </div>          \r\n        );\r\n    else\r\n        return (\r\n            <div></div>\r\n        );\r\n};\r\n\r\nexport default DishDetail;","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\MainComponent.js",["79"],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\HeaderComponent.js",["80"],"import React, { Component } from 'react';\r\nimport { Navbar, NavbarBrand, Nav, NavBarToggler, Collapse, NavItem, Jumbotron, NavbarToggler, Button, Modal, ModalHeader, ModalBody, Label, FormGroup, Input, Form } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        this.toggleModal();\r\n        alert(\"Username : \" + this.username.value + \" Password : \" + this.password.value + \" Remember : \" + this.remember.checked);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar dark expand=\"md\">\r\n                    <div className=\"container\">\r\n                        <NavbarToggler onClick={this.toggleNav} />\r\n                        <NavbarBrand className=\"mr-auto\" href=\"/\">\r\n                            <img src=\"assets/images/logo.png\" height=\"30\" width=\"41\" alt=\"Ristorante Con Fusion\" />\r\n                        </NavbarBrand>\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav navbar>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/home\">\r\n                                        <span className=\"fa fa-home fa-lg\"></span> Home\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/aboutus\">\r\n                                        <span className=\"fa fa-info fa-lg\"></span> About Us\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/menu\">\r\n                                        <span className=\"fa fa-home fa-lg\"></span> Menu\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/contactus\">\r\n                                        <span className=\"fa fa-address-card fa-lg\"></span> Contact Us\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <Button outline onClick={this.toggleModal}>\r\n                                        <span className=\"fa fa-sign-in fa-lg\"></span> Login\r\n                                    </Button>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse >\r\n                        \r\n                    </div>\r\n                </Navbar>\r\n                <Jumbotron>\r\n                    <div className=\"container\">\r\n                        <div className=\"row row-header\">\r\n                            <div className=\"col-12 col-sm-6\">\r\n                                <h1>Ristornate Con Fusion</h1>\r\n                                <p>We take inspiration from the world's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\" innerRef={(input) => this.username = input} />                                \r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\" innerRef={(input) => this.password = input} />                                \r\n                            </FormGroup>\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\" innerRef={(input) => this.remember = input} />\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" className=\"bg-primary\" color=\"primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\FooterComponent.js",[],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\HomeComponent.js",[],["81","82"],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\ContactComponent.js",["83","84"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, Row, FormFeedback } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: '',\r\n            agree: false,\r\n            conatctType: 'Tel.',\r\n            message: '',\r\n            touched: {\r\n                firstname: false,\r\n                lastname: false,\r\n                telnum: false,\r\n                email: false\r\n            }\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        console.log(\"Current State is : \" + JSON.stringify(this.state));\r\n        alert(\"Current State is : \" + JSON.stringify(this.state));\r\n        event.preventDefault();        \r\n    }\r\n\r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n            touched: { ...this.state.touched, [field]: true }\r\n        });\r\n    }\r\n\r\n    validate(firstname, lastname, telnum, email) {\r\n        const errors = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: '',\r\n        }\r\n\r\n        if (this.state.touched.firstname && firstname.length < 3)\r\n            errors.firstname = 'First Name should be >= 3 characters';\r\n        else if (this.state.touched.firstname && firstname.length > 10)\r\n            errors.firstname = 'First Name should be <= 10 characters';\r\n\r\n        if (this.state.touched.lastname && lastname.length < 3)\r\n            errors.lastname = 'First Name should be >= 3 characters';\r\n        else if (this.state.touched.lastname && lastname.length > 10)\r\n            errors.lastname = 'First Name should be <= 10 characters';\r\n\r\n        const reg = /^\\d+$/;\r\n        if (this.state.touched.telnum && !reg.test(telnum))\r\n            errors.telnum = 'Tel. Number should contain only numbers';\r\n\r\n        if (this.state.touched.email && email.split('').filter(x => x === '@').length !== 1)\r\n            errors.email = 'Email should contain a @';\r\n\r\n        return errors;\r\n    }\r\n\r\n    render() {\r\n        const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email)\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us Your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"firstname\" md={2}>Frist Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"firstname\" name=\"firstname\" \r\n                                        placeholder=\"First Name\" value={this.state.firstname} \r\n                                        valid={errors.firstname === ''}\r\n                                        invalid={errors.firstname !== ''}\r\n                                        onBlur={this.handleBlur('firstname')}\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.firstname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"lastname\" name=\"lastname\" \r\n                                        placeholder=\"Last Name\" value={this.state.lastname} \r\n                                        valid={errors.lastname === ''}\r\n                                        invalid={errors.lastname !== ''}\r\n                                        onBlur={this.handleBlur('lastname')}\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.lastname}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"telnum\" name=\"telnum\" \r\n                                        placeholder=\"Tel. Number\" value={this.state.telnum} \r\n                                        valid={errors.telnum === ''}\r\n                                        invalid={errors.telnum !== ''}\r\n                                        onBlur={this.handleBlur('telnum')}\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.telnum}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"email\" id=\"email\" name=\"email\" \r\n                                        placeholder=\"Email\" value={this.state.email} \r\n                                        valid={errors.email === ''}\r\n                                        invalid={errors.email !== ''}\r\n                                        onBlur={this.handleBlur('email')}\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.email}</FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size: 6, offset: 2}} >\r\n                                    <FormGroup check>\r\n                                        <Label check>\r\n                                            <Input type=\"checkbox\" name=\"agree\" checked={this.state.agree} \r\n                                                onChange={this.handleInputChange} /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}} >\r\n                                    <Input type=\"select\" name=\"contactType\" value={this.state.contactType} \r\n                                        onChange={this.handleInputChange}>\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"textarea\" id=\"message\" name=\"message\" \r\n                                        rows=\"12\" value={this.state.message} \r\n                                        onChange={this.handleInputChange} />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size:10, offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Contact;","D:\\workspace\\workspace-react-coursera\\confusion\\src\\shared\\comments.js",[],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\shared\\leaders.js",[],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\components\\AboutComponent.js",[],"D:\\workspace\\workspace-react-coursera\\confusion\\src\\shared\\promotions.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"85","replacedBy":"89"},{"ruleId":"87","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":26},{"ruleId":"91","severity":1,"message":"95","line":2,"column":41,"nodeType":"93","messageId":"94","endLine":2,"endColumn":49},{"ruleId":"91","severity":1,"message":"96","line":2,"column":51,"nodeType":"93","messageId":"94","endLine":2,"endColumn":59},{"ruleId":"91","severity":1,"message":"97","line":4,"column":10,"nodeType":"93","messageId":"94","endLine":4,"endColumn":16},{"ruleId":"91","severity":1,"message":"98","line":5,"column":8,"nodeType":"93","messageId":"94","endLine":5,"endColumn":18},{"ruleId":"91","severity":1,"message":"92","line":1,"column":10,"nodeType":"93","messageId":"94","endLine":1,"endColumn":19},{"ruleId":"99","severity":1,"message":"100","line":23,"column":5,"nodeType":"101","messageId":"102","endLine":25,"endColumn":6},{"ruleId":"91","severity":1,"message":"103","line":2,"column":36,"nodeType":"93","messageId":"94","endLine":2,"endColumn":49},{"ruleId":"85","replacedBy":"104"},{"ruleId":"87","replacedBy":"105"},{"ruleId":"91","severity":1,"message":"106","line":2,"column":82,"nodeType":"93","messageId":"94","endLine":2,"endColumn":85},{"ruleId":"107","severity":1,"message":"108","line":116,"column":29,"nodeType":"109","endLine":116,"endColumn":71},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],["110"],["111"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'CardText' is defined but never used.","'CardBody' is defined but never used.","'DISHES' is defined but never used.","'Dishdetail' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'NavBarToggler' is defined but never used.",["110"],["111"],"'Row' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]